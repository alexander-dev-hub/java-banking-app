/*
TABLE DECLERAION
*/
CREATE TABLE APPROVED_CUSTOMER
(
CUSTOMERID NUMBER PRIMARY KEY,
ADDRESS VARCHAR2(80),
FIRSTNAME VARCHAR2(20),
LASTNAME VARCHAR2(20),
USERNAME VARCHAR2(30),
ACCOUNT_NUMBER NUMBER
);

CREATE TABLE BANK_USERS(
USERNAME VARCHAR2(40) PRIMARY KEY,
PASSWORD VARCHAR2(40),
TYPE VARCHAR2(20));

CREATE TABLE BANK_ACCOUNT
(
ACCOUNT_NUMBER NUMBER PRIMARY KEY,
BALANCE INTEGER
);

CREATE TABLE UNAPPROVED_CUSTOMER
(
CUSTOMERID NUMBER PRIMARY KEY,
ADDRESS VARCHAR2(80),
FIRSTNAME VARCHAR2(20),
LASTNAME VARCHAR2(20),
USERNAME VARCHAR2(40),
APPLICATIONID NUMBER
);

CREATE TABLE ACCOUNT_APPLICATION
(
APPLICATIONID NUMBER PRIMARY KEY,
STATUS INTEGER
);

/*
ADDING FOREIGN KEYS.
*/
ALTER TABLE APPROVED_CUSTOMER ADD CONSTRAINT FK_ACCOUNT_NUMBER
FOREIGN KEY (ACCOUNT_NUMBER) REFERENCES BANK_ACCOUNT (ACCOUNT_NUMBER);

ALTER TABLE APPROVED_CUSTOMER ADD CONSTRAINT FK_USERNAME
FOREIGN KEY (USERNAME) REFERENCES BANK_USERS (USERNAME);

ALTER TABLE UNAPPROVED_CUSTOMER ADD CONSTRAINT U_FK_USERNAME
FOREIGN KEY (USERNAME) REFERENCES BANK_USERS (USERNAME);

ALTER TABLE UNAPPROVED_CUSTOMER ADD CONSTRAINT FK_APPLICATION
FOREIGN KEY (APPLICATIONID) REFERENCES ACCOUNT_APPLICATION (APPLICATIONID);

/*
SEQUENCES
*/
CREATE SEQUENCE CUSTOMERID_SEQ;
CREATE SEQUENCE ACCOUNT_NUMBER_SEQ;
CREATE SEQUENCE APPLICATION_SEQ;

/*
STORED PROCEDURES
*/
CREATE OR REPLACE PROCEDURE CREATE_APPROVED_CUSTOMER
(C_ID IN NUMBER,C_ADDRESS IN VARCHAR2, F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, U_NAME IN VARCHAR2)
AS
A_NUMBER NUMBER;
BEGIN
A_NUMBER:=ACCOUNT_NUMBER_SEQ.NEXTVAL;
INSERT INTO BANK_ACCOUNT VALUES(A_NUMBER,0);
INSERT INTO APPROVED_CUSTOMER VALUES(C_ID,C_ADDRESS,F_NAME,L_NAME,U_NAME,A_NUMBER);
COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_UA_CUSTOMER
(C_ADDRESS IN VARCHAR2, F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, U_NAME IN VARCHAR2,C_PASSWORD IN VARCHAR2)
AS 
A_ID NUMBER;
BEGIN
A_ID:=APPLICATION_SEQ.NEXTVAL;
INSERT INTO ACCOUNT_APPLICATION VALUES(A_ID,0);
INSERT INTO BANK_USERS VALUES(U_NAME,C_PASSWORD,'customer');
INSERT INTO UNAPPROVED_CUSTOMER VALUES(CUSTOMERID_SEQ.NEXTVAL,C_ADDRESS,F_NAME,L_NAME,U_NAME,A_ID);
COMMIT;
END;
/

/*
TRIGGERS
*/
CREATE OR REPLACE TRIGGER AFTER_APPROVED_CUSTOMER_DELETE
AFTER DELETE ON APPROVED_CUSTOMER
FOR EACH ROW
BEGIN
DELETE FROM BANK_ACCOUNT WHERE ACCOUNT_NUMBER=(:OLD.ACCOUNT_NUMBER);
DELETE FROM BANK_USERS WHERE USERNAME=(:OLD.USERNAME);
END;
/

CREATE OR REPLACE TRIGGER AFTER_UA_CUSTOMER_DELETE
AFTER DELETE ON UNAPPROVED_CUSTOMER
FOR EACH ROW
BEGIN
DELETE FROM ACCOUNT_APPLICATION WHERE APPLICATIONID=(:OLD.APPLICATIONID);
CREATE_APPROVED_CUSTOMER(:OLD.CUSTOMERID,:OLD.ADDRESS,:OLD.FIRSTNAME,:OLD.LASTNAME,:OLD.USERNAME);
END;
/

CREATE OR REPLACE TRIGGER AFTER_USER_UPDATE
AFTER UPDATE ON BANK_USERS
FOR EACH ROW
BEGIN
UPDATE APPROVED_CUSTOMER SET USERNAME=(:NEW.USERNAME) WHERE USERNAME=(:OLD.USERNAME);
UPDATE UNAPPROVED_CUSTOMER SET USERNAME=(:NEW.USERNAME) WHERE USERNAME=(:OLD.USERNAME);
END;
/

/*
Seeding
*/
INSERT INTO BANK_USERS VALUES('nick','password','customer');
INSERT INTO BANK_USERS VALUES('dan','password','customer');
INSERT INTO BANK_USERS VALUES('tom','p','employee');
INSERT INTO BANK_USERS VALUES('admin','p','administrator');

INSERT INTO BANK_ACCOUNT VALUES(ACCOUNT_NUMBER_SEQ.NEXTVAL,1000);

INSERT INTO APPROVED_CUSTOMER VALUES(CUSTOMERID_SEQ.NEXTVAL,'SOMEWHERE','Nick','Helgeland','nick',3);

COMMIT;


